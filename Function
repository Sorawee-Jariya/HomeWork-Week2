Function (9ข้อ)
Write Reusable JavaScript with Functions
Passing Values to Functions with Arguments
Global Scope and Functions
Local Scope and Functions
Global vs. Local Scope in Functions
Return a Value from a Function with Return
Understanding Undefined Value returned from a Function
Assignment with a Returned Value
Stand in Line
Basic
1.Write Reusable JavaScript with Functions

// Finish and Paste your solution here
function reusableFunction () {
  return console.log("Hi World")
}
reusableFunction();

2.Passing Values to Functions with Arguments

// Finish and Paste your solution here
function functionWithArgs (a,b) {
  let result = a + b;
  return console.log(result);
}

functionWithArgs(5,5);

Scope
1.Global Scope and FunctionsPassed

// Finish and Paste your solution here
// Declare the myGlobal variable below this line
var myGlobal = 10;

function fun1() {
  // Assign 5 to oopsGlobal Here
oopsGlobal = 5;
}

// Only change code above this line

function fun2() {
  var output = "";
  if (typeof myGlobal != "undefined") {
    output += "myGlobal: " + myGlobal;
  }
  if (typeof oopsGlobal != "undefined") {
    output += " oopsGlobal: " + oopsGlobal;
  }
  console.log(output);
}

2.Local Scope and FunctionsPassed

// Finish and Paste your solution here
function myLocalScope() {

  // Only change code below this line
var myVar;
  console.log('inside myLocalScope', myVar);
}
myLocalScope();

// Run and check the console
// myVar is not defined outside of myLocalScope
console.log('outside myLocalScope', myVar);

3.Global vs. Local Scope in FunctionsPassed

// Finish and Paste your solution here
// Setup
var outerWear = "T-Shirt";

function myOutfit() {
  // Only change code below this line
var outerWear = "sweater";


  // Only change code above this line
  return outerWear;
}

myOutfit();

Return
1.Return a Value from a Function with Return

// Finish and Paste your solution here

function timesFive (val) {
    return val * 5
    }
  
  timesFive(5);
2.Understanding Undefined Value returned from a FunctionPassed

// Finish and Paste your solution here
// Setup
var sum = 0;

function addThree() {
  sum = sum + 3;
}

// Only change code below this line
function addFive () {
  sum = sum + 5;
}

// Only change code above this line

addThree(5);
addFive(5);

3.Assignment with a Returned Value

// Finish and Paste your solution here

// Setup
var processed = 0;

function processArg(num) {
  return (num + 3) / 5;
}

// Only change code below this line

processed = processArg(7);
Application
1.Stand in Line (ใช้ความรู้เรื่อง Array)

// Finish and Paste your solution here
function nextInLine(arr, item) {
  // Your code here
  arr.push(item);
  var removed = arr.shift();
  return removed; // Change this line
}

// Setup
var testArr = [1,2,3,4,5];

// Display code
console.log("Before: " + JSON.stringify(testArr));
console.log(nextInLine(testArr, 6));
console.log("After: " + JSON.stringify(testArr));




Function
Prerequisite
basic functions
if else
Content
Returning Boolean Values from Functions
Return Early Pattern for Functions
Counting Cards
1.Returning Boolean Values from Functions

// Finish and Paste your solution here
function isLess(a, b) {
  // Only change code below this line
  return a <= b;
  // Only change code above this line
}

isLess(10, 15);

2.Return Early Pattern for Functions

// Finish and Paste your solution here

// Setup
function abTest(a, b) {
  // Only change code below this line
 if (a < 0 || b < 0) {
   return;
 }


  // Only change code above this line

  return Math.round(Math.pow(Math.sqrt(a) + Math.sqrt(b), 2));
}

abTest(2,2);
Application
1.Counting Cards

// Finish and Paste your solution here
var count = 0;

function cc(card) {
  // Only change code below this line
  switch (card) {
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      count++;
      break;
    case 10:
    case "J":
    case "Q":
    case "K":
    case "A":
      count--;
      break;
  }
  if (count > 0) {
    return count + " Bet";
  } else {
    return count + " Hold";
  }
  // Only change code above this line
}

cc(2); cc(3); cc(7); cc('K'); cc('A');




Arrow Function (3ข้อ)
Prerequisite
Basic Function
1.Use Arrow Functions to Write Concise Anonymous Functions

// Finish and Paste your solution here

const magic = () => new Date();

2.Write Arrow Functions with Parameters

// Finish and Paste your solution here

const myConcat = (arr1,arr2) => arr1.concat(arr2);

console.log(myConcat([1, 2], [3, 4, 5]));

3.Set Default Parameters for Your Functions

// Finish and Paste your solution here

// Only change code below this line
const increment = (number = 1, value = 1) => number + value;
// Only change code above this line